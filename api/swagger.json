{
  "swagger" : "2.0",
  "info" : {
    "description" : "Adobe Commerce Cloud API",
    "version" : "0.1.118",
    "title" : "Commerce Cloud Integration Framework API",
    "license" : {
      "name" : "Copyright 2018 Adobe Systems Incorporated. All Rights Reserved."
    },
    "x-ow-namespace" : "aem_demo",
    "x-ow-package" : "default"
  },
  "host" : "runtime.adobe.com",
  "basePath" : "/commerce",
  "tags" : [ {
    "name" : "carts"
  }, {
    "name" : "categories"
  }, {
    "name" : "customers"
  }, {
    "name" : "inventory"
  }, {
    "name" : "orders"
  }, {
    "name" : "products"
  }, {
    "name" : "shoppinglists"
  } ],
  "schemes" : [ "https" ],
  "paths" : {
    "/carts" : {
      "post" : {
        "tags" : [ "carts" ],
        "summary" : "Creates an empty cart. For convenience it also adds a cart entry when product variant id and quantity are provided.",
        "description" : "",
        "operationId" : "postCart",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "currency",
          "in" : "formData",
          "description" : "Three-digit currency code.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "productVariantId",
          "in" : "formData",
          "description" : "The product variant id to be added to the cart entry.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "quantity",
          "in" : "formData",
          "description" : "The quantity for the product variant.",
          "required" : false,
          "type" : "integer",
          "format" : "int32"
        }, {
          "name" : "customerId",
          "in" : "formData",
          "description" : "If set, the newly created cart will belong to this customer.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to create a cart.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/carts/{id}" : {
      "get" : {
        "tags" : [ "carts" ],
        "summary" : "Returns a cart by ID.",
        "description" : "",
        "operationId" : "getCart",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart to be returned.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to fetch that cart.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "carts" ],
        "summary" : "Deletes the cart.",
        "description" : "",
        "operationId" : "deleteCart",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart to be removed.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to delete that cart.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/carts/{id}/billingaddress" : {
      "post" : {
        "tags" : [ "carts" ],
        "summary" : "Sets the billing address for the cart.",
        "description" : "",
        "operationId" : "postBillingAddress",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart for the billing address",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The billing address and an optional customer id that must be set if the cart belongs to a customer.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AddressWrapper"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to set the billing address",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "carts" ],
        "summary" : "Deletes the billing address for the cart.",
        "description" : "",
        "operationId" : "deleteBillingAddress",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart for which the billing address will be deleted.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to delete the billing address",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/carts/{id}/coupons" : {
      "post" : {
        "tags" : [ "carts" ],
        "summary" : "Adds a coupon to the shopping cart.",
        "description" : "",
        "operationId" : "postCoupons",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the cart to which the coupon will be added.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "code",
          "in" : "formData",
          "description" : "The coupon code.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "formData",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/carts/{id}/coupons/{couponId}" : {
      "delete" : {
        "tags" : [ "carts" ],
        "summary" : "Deletes a coupon from the shopping cart.",
        "description" : "",
        "operationId" : "deleteCoupons",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the cart for which the coupon will be deleted.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "couponId",
          "in" : "path",
          "description" : "The id of the coupon that will be deleted.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/carts/{id}/entries" : {
      "post" : {
        "tags" : [ "carts" ],
        "summary" : "Adds a new cart entry to an existing cart.",
        "description" : "",
        "operationId" : "postCartEntry",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart for the new entry",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "productVariantId",
          "in" : "formData",
          "description" : "The product variant id to be added to the cart entry. If product variant exists in the cart then the cart entry quantity is increased with the provided quantity",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "quantity",
          "in" : "formData",
          "description" : "The quantity for the new entry.",
          "required" : true,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "customerId",
          "in" : "formData",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to add an entry to that cart.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/carts/{id}/entries/{cartEntryId}" : {
      "put" : {
        "tags" : [ "carts" ],
        "summary" : "Updates an existing cart entry.",
        "description" : "",
        "operationId" : "putCartEntry",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "cartEntryId",
          "in" : "path",
          "description" : "The cart entry id to be updated.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "quantity",
          "in" : "formData",
          "description" : "The cart entry quantity. When quantity is 0 the entry will be removed otherwise the value is used as new quantity.",
          "required" : true,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "customerId",
          "in" : "formData",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to update that cart entry.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "carts" ],
        "summary" : "Removes a cart entry from the cart.",
        "description" : "",
        "operationId" : "deleteCartEntry",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "cartEntryId",
          "in" : "path",
          "description" : "The cart entry id to be removed.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to delete that cart entry.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Resource not found - cart or entry.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/carts/{id}/payment" : {
      "post" : {
        "tags" : [ "carts" ],
        "summary" : "Creates a payment for this shopping cart.",
        "description" : "",
        "operationId" : "postPayment",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart for which the payment will be set.",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The payment to create. If the cart belongs to a customer, the customer id must be set.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/PaymentWrapper"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to set the payment.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "carts" ],
        "summary" : "Removes the payment from the shopping cart. ",
        "description" : "",
        "operationId" : "deletePayment",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart for which the payment will be deleted.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to update the payment.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/carts/{id}/shippingaddress" : {
      "post" : {
        "tags" : [ "carts" ],
        "summary" : "Sets the shipping address for the cart.",
        "description" : "",
        "operationId" : "postShippingAddress",
        "consumes" : [ "application/json" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart for the shipping address",
          "required" : true,
          "type" : "string"
        }, {
          "in" : "body",
          "name" : "body",
          "description" : "The shipping address and an optional customer id that must be set if the cart belongs to a customer.",
          "required" : true,
          "schema" : {
            "$ref" : "#/definitions/AddressWrapper"
          }
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to set the shipping address",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "carts" ],
        "summary" : "Deletes the shipping address for the cart.",
        "description" : "",
        "operationId" : "deleteShippingAddress",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart for which the shipping address will be deleted.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to delete the shipping address",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/carts/{id}/shippingmethod" : {
      "post" : {
        "tags" : [ "carts" ],
        "summary" : "Updates the shipping method for the cart.",
        "description" : "",
        "operationId" : "postShippingMethod",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart for which the shipping method will be updated.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "shippingMethodId",
          "in" : "formData",
          "description" : "The shipping method id.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "formData",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to set the shipping method.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "carts" ],
        "summary" : "Deletes the shipping method for the cart.",
        "description" : "",
        "operationId" : "deleteShippingMethod",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the cart for which the shipping method will be deleted.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Cart"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to delete the shipping method.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/carts/{id}/shippingmethods" : {
      "get" : {
        "tags" : [ "carts" ],
        "summary" : "Retrieves the available shipping methods for the current cart.",
        "description" : "",
        "operationId" : "getShippingMethods",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the cart",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "query",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "type" : "array",
              "items" : {
                "$ref" : "#/definitions/ShippingMethod"
              }
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/categories" : {
      "get" : {
        "tags" : [ "categories" ],
        "summary" : "Returns the entire category structure or a subset of it depending on pagination",
        "description" : "",
        "operationId" : "getCategories",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "sort",
          "in" : "query",
          "description" : "The sort attributes and direction, separated by the pipe character (OpenWhisk does not yet support the 'multi' collection format).",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Defines the number of categories to skip when returning the result.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Defines the maximum number of categories to be returned by that query.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "type",
          "in" : "query",
          "description" : "Defines if the request should return either a flat or tree category structure.",
          "required" : false,
          "type" : "string",
          "default" : "flat",
          "enum" : [ "flat", "tree" ]
        }, {
          "name" : "depth",
          "in" : "query",
          "description" : "Defines the maximum depth of the returned categories. No value means infinite depth, 0 means only the root categories.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PagedResponseCategory"
            }
          }
        }
      }
    },
    "/categories/{id}" : {
      "get" : {
        "tags" : [ "categories" ],
        "summary" : "Returns a category by ID",
        "description" : "",
        "operationId" : "getCategoryById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the category to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Category"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Category not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/customers/login" : {
      "post" : {
        "tags" : [ "customers" ],
        "summary" : "Performs a customer login, potentially merging an anonymous cart with a customer cart.",
        "description" : "",
        "operationId" : "postCustomerLogin",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "email",
          "in" : "formData",
          "description" : "The email address of the customer",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "password",
          "in" : "formData",
          "description" : "The password for this customer",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "anonymousCartId",
          "in" : "formData",
          "description" : "An optional anonymous cart id to be merged during the login process",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/LoginResult"
            }
          },
          "400" : {
            "description" : "Invalid customer credentials",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/customers/{id}" : {
      "get" : {
        "tags" : [ "customers" ],
        "summary" : "Returns a customer by ID.",
        "description" : "",
        "operationId" : "getCustomerById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the customer",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Customer"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Customer not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/inventory/query" : {
      "get" : {
        "tags" : [ "inventory" ],
        "summary" : "Queries inventory based on the given query parameters.",
        "description" : "",
        "operationId" : "query",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "productId",
          "in" : "query",
          "description" : "The list of product identifiers for which the inventory will be queried.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "scope",
          "in" : "query",
          "description" : "The list of scopes for which the inventory will be queried.",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Defines the number of inventory items to skip when returning the result.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Defines the maximum number of inventory items to be returned in the result.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PagedResponseInventoryItem"
            }
          },
          "400" : {
            "description" : "Invalid query parameters supplied",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/orders" : {
      "post" : {
        "tags" : [ "orders" ],
        "summary" : "Creates an order based on a cart.",
        "description" : "",
        "operationId" : "postOrder",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "cartId",
          "in" : "formData",
          "description" : "The id of the cart from which the order will be created.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "customerId",
          "in" : "formData",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Order"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Not allowed to create the order.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Cart not found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/products/search" : {
      "get" : {
        "tags" : [ "products" ],
        "summary" : "Searches products based on the given query parameters",
        "description" : "",
        "operationId" : "searchProducts",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "text",
          "in" : "query",
          "description" : "The text to search if this is a full-text search.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "filter",
          "in" : "query",
          "description" : "The search filters, separated by the pipe character (OpenWhisk does not yet support the 'multi' collection format).",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "selectedFacets",
          "in" : "query",
          "description" : "The facets values used for filtering, separated by the pipe character (OpenWhisk does not yet support the 'multi' collection format).",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "queryFacets",
          "in" : "query",
          "description" : "The facets list to be calculated, separated by the pipe character (OpenWhisk does not yet support the 'multi' collection format).",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "sort",
          "in" : "query",
          "description" : "The sort attributes and direction, separated by the pipe character (OpenWhisk does not yet support the 'multi' collection format).",
          "required" : false,
          "type" : "array",
          "items" : {
            "type" : "string"
          },
          "collectionFormat" : "pipes"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Defines the number of products to skip when returning the result.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Defines the maximum number of products to be returned by that search.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PagedResponseProduct"
            }
          },
          "400" : {
            "description" : "Invalid search parameters supplied",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/products/{id}" : {
      "get" : {
        "tags" : [ "products" ],
        "summary" : "Returns a product by ID.",
        "description" : "",
        "operationId" : "getProductById",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The ID of the product to return",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/Product"
            }
          },
          "400" : {
            "description" : "Invalid ID supplied",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Product not found",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/shoppinglists" : {
      "get" : {
        "tags" : [ "shoppinglists" ],
        "summary" : "Gets a users shopping lists.",
        "description" : "The entries property is empty for all shopping lists in the response. To retrieve entries, query a single shopping list.",
        "operationId" : "getShoppingLists",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "offset",
          "in" : "query",
          "description" : "Defines the number of shopping lists to skip.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Defines the maximum number of shopping lists to be returned.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PagedResponseShoppingList"
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "shoppinglists" ],
        "summary" : "Creates a new shopping list for the current user.",
        "description" : "The name and description properties will be stored as localized strings in the language defined by the Content-Language header.",
        "operationId" : "postShoppingList",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "name",
          "in" : "formData",
          "description" : "Name of the shopping list.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "formData",
          "description" : "Description of the shopping list.",
          "required" : false,
          "type" : "string"
        }, {
          "name" : "Content-Language",
          "in" : "header",
          "description" : "Language of the shopping list.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ShoppingList"
            }
          },
          "201" : {
            "description" : "Created.",
            "schema" : {
              "$ref" : "#/definitions/ShoppingList"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "Location of the newly created shopping list."
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/shoppinglists/{id}" : {
      "get" : {
        "tags" : [ "shoppinglists" ],
        "summary" : "Gets a users shopping list with a given id.",
        "description" : "",
        "operationId" : "getShoppingList",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the shopping list to return.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ShoppingList"
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "shoppinglists" ],
        "summary" : "Replaces a shopping list with the given one.",
        "description" : "",
        "operationId" : "putShoppingList",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the shopping list to replace.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "name",
          "in" : "formData",
          "description" : "Name of the shopping list.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "description",
          "in" : "formData",
          "description" : "Description of the shopping list.",
          "required" : false,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ShoppingList"
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "shoppinglists" ],
        "summary" : "Deletes a shopping list.",
        "description" : "",
        "operationId" : "deleteShoppingList",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the shopping list to be deleted.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content."
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/shoppinglists/{id}/entries" : {
      "get" : {
        "tags" : [ "shoppinglists" ],
        "summary" : "Gets all entries from a shopping list.",
        "description" : "",
        "operationId" : "getShoppingListEntries",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the shopping list to return entries from.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "offset",
          "in" : "query",
          "description" : "Defines the number of entries to skip.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "limit",
          "in" : "query",
          "description" : "Defines the maximum number of entries to be returned.",
          "required" : false,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/PagedResponseShoppingListEntry"
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "post" : {
        "tags" : [ "shoppinglists" ],
        "summary" : "Creates a new entry for a shopping list.",
        "description" : "",
        "operationId" : "postShoppingListEntry",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the shopping list.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "quantity",
          "in" : "formData",
          "description" : "The quantity for the new entry.",
          "required" : true,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "productVariantId",
          "in" : "formData",
          "description" : "The product variant id to be added to the entry. If the product variant exists in the shopping list, its quantity is increased with the provided quantity.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ShoppingListEntry"
            }
          },
          "201" : {
            "description" : "Created.",
            "schema" : {
              "$ref" : "#/definitions/ShoppingList"
            },
            "headers" : {
              "Location" : {
                "type" : "string",
                "description" : "Location of the newly created entry."
              }
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    },
    "/shoppinglists/{id}/entries/{entryId}" : {
      "get" : {
        "tags" : [ "shoppinglists" ],
        "summary" : "Gets a single entry from a shopping list.",
        "description" : "",
        "operationId" : "getShoppingListEntry",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the shopping list.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entryId",
          "in" : "path",
          "description" : "The id of the shopping list entry to return.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ShoppingListEntry"
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "put" : {
        "tags" : [ "shoppinglists" ],
        "summary" : "Replaces an entry with the given one.",
        "description" : "",
        "operationId" : "putShoppingListEntry",
        "consumes" : [ "application/x-www-form-urlencoded" ],
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the shopping list.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entryId",
          "in" : "path",
          "description" : "The id of the entry to replace.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "quantity",
          "in" : "formData",
          "description" : "The quantity for the new entry.",
          "required" : true,
          "type" : "integer",
          "minimum" : 0,
          "format" : "int32"
        }, {
          "name" : "productVariantId",
          "in" : "formData",
          "description" : "The product variant id to be added to the entry. If the product variant exists in another entry in the shopping list, this request fails.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "200" : {
            "description" : "successful operation",
            "schema" : {
              "$ref" : "#/definitions/ShoppingListEntry"
            }
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      },
      "delete" : {
        "tags" : [ "shoppinglists" ],
        "summary" : "Deletes an entry from a shopping list.",
        "description" : "",
        "operationId" : "deleteShoppingListEntry",
        "produces" : [ "application/json" ],
        "parameters" : [ {
          "name" : "id",
          "in" : "path",
          "description" : "The id of the shopping list.",
          "required" : true,
          "type" : "string"
        }, {
          "name" : "entryId",
          "in" : "path",
          "description" : "The id of the entry.",
          "required" : true,
          "type" : "string"
        } ],
        "responses" : {
          "204" : {
            "description" : "No Content."
          },
          "400" : {
            "description" : "Bad Request.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "403" : {
            "description" : "Forbidden.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          },
          "404" : {
            "description" : "Not Found.",
            "schema" : {
              "$ref" : "#/definitions/ErrorResponse"
            }
          }
        }
      }
    }
  },
  "definitions" : {
    "Address" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "Address unique identifier."
        },
        "title" : {
          "type" : "string",
          "description" : "Address title"
        },
        "salutation" : {
          "type" : "string",
          "description" : "Address salutation"
        },
        "firstName" : {
          "type" : "string",
          "description" : "First name."
        },
        "lastName" : {
          "type" : "string",
          "description" : "Last name."
        },
        "email" : {
          "type" : "string",
          "description" : "Email."
        },
        "phone" : {
          "type" : "string",
          "description" : "Phone."
        },
        "mobile" : {
          "type" : "string",
          "description" : "Mobile."
        },
        "fax" : {
          "type" : "string",
          "description" : "Fax."
        },
        "country" : {
          "type" : "string",
          "description" : "Country code as per ISO 3166-1. "
        },
        "region" : {
          "type" : "string",
          "description" : "Region."
        },
        "city" : {
          "type" : "string",
          "description" : "City."
        },
        "postalCode" : {
          "type" : "string",
          "description" : "Postal code."
        },
        "organizationName" : {
          "type" : "string",
          "description" : "Organization name. Can be company name. "
        },
        "department" : {
          "type" : "string",
          "description" : "Department."
        },
        "streetName" : {
          "type" : "string",
          "description" : "Street name."
        },
        "streetNumber" : {
          "type" : "string",
          "description" : "Street no."
        },
        "additionalStreetInfo" : {
          "type" : "string",
          "description" : "Additional details for the street address."
        },
        "additionalAddressInfo" : {
          "type" : "string",
          "description" : "Additional details for the address."
        }
      }
    },
    "AddressWrapper" : {
      "type" : "object",
      "properties" : {
        "address" : {
          "description" : "The address object.",
          "$ref" : "#/definitions/Address"
        },
        "customerId" : {
          "type" : "string",
          "description" : "If the cart belongs to a customer, this must be set to the customer id owning that cart."
        }
      }
    },
    "Asset" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the asset."
        },
        "url" : {
          "type" : "string",
          "description" : "The url of the asset."
        }
      }
    },
    "Attribute" : {
      "type" : "object",
      "required" : [ "id", "name", "value" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The unique id for this text attribute, for example 'width'."
        },
        "name" : {
          "type" : "object",
          "description" : "The localized name for this text attribute, for example 'Width' or 'Breite'.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "value" : {
          "type" : "object",
          "description" : "The value of the attribute. This can be any arbitrary valid JSON value."
        },
        "variantAttribute" : {
          "type" : "boolean",
          "description" : "If true, this attribute is a variant attribute. If not set or false, the attribute is a normal/simple attribute."
        }
      }
    },
    "Cart" : {
      "type" : "object",
      "required" : [ "cartEntries", "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id for the cart."
        },
        "cartEntries" : {
          "type" : "array",
          "description" : "The list of the entries in the cart.",
          "items" : {
            "$ref" : "#/definitions/CartEntry"
          }
        },
        "customerId" : {
          "type" : "string",
          "description" : "If set, this defines the customer owning this cart. If not set, the cart is an anonymous cart."
        },
        "netTotalPrice" : {
          "description" : "The net total price for the cart, including discounts, and shipping, but excluding any taxes.",
          "$ref" : "#/definitions/Price"
        },
        "grossTotalPrice" : {
          "description" : "The gross total price for the cart, including discounts, shipping, and all taxes.",
          "$ref" : "#/definitions/Price"
        },
        "totalProductPrice" : {
          "description" : "The product subtotal for the cart, including discounts and with or without taxes depending if the product prices include taxes or not.Until a shipping address is set, this field is typically used as the temporary cart total until it is known if prices include taxes or not.",
          "$ref" : "#/definitions/Price"
        },
        "cartTaxInfo" : {
          "description" : "The cart tax info, including cart entries tax and shipping info tax.",
          "$ref" : "#/definitions/TaxInfo"
        },
        "taxIncludedInPrices" : {
          "type" : "boolean",
          "description" : "Indicates if taxes are included or not in all the prices."
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this cart was created."
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this cart was last modified."
        },
        "shippingAddress" : {
          "description" : "The shipping address for the cart products.",
          "$ref" : "#/definitions/Address"
        },
        "shippingInfo" : {
          "description" : "The shipping info for the cart.",
          "$ref" : "#/definitions/ShippingInfo"
        },
        "discounts" : {
          "type" : "array",
          "description" : "A list of all applied discounts.",
          "items" : {
            "$ref" : "#/definitions/Discount"
          }
        },
        "billingAddress" : {
          "description" : "The billing address for the cart.",
          "$ref" : "#/definitions/Address"
        },
        "payment" : {
          "description" : "The payment details for the cart.",
          "$ref" : "#/definitions/Payment"
        },
        "currency" : {
          "type" : "string",
          "description" : "The currency for the cart."
        },
        "coupons" : {
          "type" : "array",
          "description" : "A list of all coupons of the cart.",
          "items" : {
            "$ref" : "#/definitions/Coupon"
          }
        }
      }
    },
    "CartEntry" : {
      "type" : "object",
      "required" : [ "id", "productVariant", "quantity" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id for the entry."
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The quantity for the entry."
        },
        "productVariant" : {
          "description" : "The ProductVariant for the entry.",
          "$ref" : "#/definitions/ProductVariant"
        },
        "unitPrice" : {
          "description" : "The product variant item price.",
          "$ref" : "#/definitions/Price"
        },
        "discounts" : {
          "type" : "array",
          "description" : "A list of all applied discounts",
          "items" : {
            "$ref" : "#/definitions/Discount"
          }
        },
        "cartEntryPrice" : {
          "description" : "The calculated cart entry price. May or may not include taxes, depending on the tax policy.",
          "$ref" : "#/definitions/Price"
        },
        "discountedCartEntryPrice" : {
          "description" : "The cart entry price after all discounts have been applied.",
          "$ref" : "#/definitions/Price"
        },
        "cartEntryTaxInfo" : {
          "description" : "The cart entry tax info.",
          "$ref" : "#/definitions/TaxInfo"
        },
        "type" : {
          "type" : "string",
          "description" : "Cart entry type.",
          "enum" : [ "REGULAR", "PROMOTION" ]
        }
      }
    },
    "Category" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The internal unique ID of the category in the commerce backend system."
        },
        "name" : {
          "type" : "object",
          "description" : "The localized name of the category.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "object",
          "description" : "The localized description of the category.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "mainParentCategoryId" : {
          "type" : "string",
          "description" : "The id of the main parent category (if this category has multiple parents)."
        },
        "parentCategories" : {
          "type" : "array",
          "description" : "The list of parent categories for this category. Depending on the backend system, the returned items may only have their ids being set.",
          "items" : {
            "$ref" : "#/definitions/Category"
          }
        },
        "subCategories" : {
          "type" : "array",
          "description" : "The list of subcategories for this category. Depending on the backend system, the returned items may only have their ids being set.",
          "items" : {
            "$ref" : "#/definitions/Category"
          }
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this product was created."
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this product was last modified."
        }
      }
    },
    "Coupon" : {
      "type" : "object",
      "required" : [ "code", "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the coupon instance applied to a cart. If not supported by commerce engine, should be equal to code."
        },
        "code" : {
          "type" : "string",
          "description" : "The code to activate the coupon."
        },
        "description" : {
          "type" : "object",
          "description" : "The description of the coupon.",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "Customer" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The unique id of this customer"
        },
        "email" : {
          "type" : "string",
          "description" : "The customer's email address"
        },
        "firstname" : {
          "type" : "string",
          "description" : "The firstname of this customer"
        },
        "lastname" : {
          "type" : "string",
          "description" : "The lastname of this customer"
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this customer was registered"
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this customer was last modified"
        }
      }
    },
    "Discount" : {
      "type" : "object",
      "required" : [ "discountedAmount", "id", "type" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id for the discount"
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the discount"
        },
        "name" : {
          "type" : "object",
          "description" : "The name of the discount",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "message" : {
          "type" : "object",
          "description" : "The message associated with the discount. May be displayed in the UI.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "discountedAmount" : {
          "description" : "The amount which is discounted. Subtract this to obtain new price",
          "$ref" : "#/definitions/Price"
        }
      }
    },
    "ErrorResponse" : {
      "type" : "object",
      "properties" : {
        "type" : {
          "type" : "string",
          "example" : "coupon",
          "description" : "The error type."
        },
        "reason" : {
          "type" : "string",
          "example" : "coupon-expired",
          "description" : "The error reason."
        },
        "message" : {
          "type" : "object",
          "example" : "{\n        \"en\": \"Coupon expired.\",\n        \"de\": \"Gutschein abgelaufen.\"\n    }",
          "description" : "Localized message",
          "additionalProperties" : {
            "type" : "string"
          }
        }
      }
    },
    "Facet" : {
      "type" : "object",
      "required" : [ "name" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The name of the facet."
        },
        "label" : {
          "type" : "object",
          "description" : "The label of the facet.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "missed" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of missed items."
        },
        "multiSelect" : {
          "type" : "boolean",
          "description" : "Indicates if the facet is multi selectable."
        },
        "type" : {
          "type" : "string",
          "description" : "The type of the facet."
        },
        "facetValues" : {
          "type" : "array",
          "description" : "List of facetValues calculated for this facet.",
          "items" : {
            "$ref" : "#/definitions/FacetValue"
          }
        }
      }
    },
    "FacetValue" : {
      "type" : "object",
      "required" : [ "id", "occurrences", "value" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id for this facet."
        },
        "value" : {
          "type" : "object",
          "description" : "The value for this facet."
        },
        "occurrences" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The number of facet value occurrences."
        },
        "selected" : {
          "type" : "boolean",
          "description" : "Indicates if the current facet value was selected."
        }
      }
    },
    "InventoryItem" : {
      "type" : "object",
      "required" : [ "inventoryId" ],
      "properties" : {
        "inventoryId" : {
          "type" : "string",
          "description" : "The inventory identifier."
        },
        "productId" : {
          "type" : "string",
          "description" : "The product identifier."
        },
        "scope" : {
          "type" : "string",
          "description" : "The scope for the inventory (i.e store or channel)."
        },
        "availableQuantity" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The product available quantity for this inventory."
        },
        "restockDaysPeriod" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The period in days when this inventory is restocked."
        },
        "expectedDeliveryDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The next expected delivery date for this inventory."
        }
      }
    },
    "LoginResult" : {
      "type" : "object",
      "properties" : {
        "customer" : {
          "description" : "The customer info returned by the login process",
          "$ref" : "#/definitions/Customer"
        },
        "cart" : {
          "description" : "The current or merged cart created during the login process",
          "$ref" : "#/definitions/Cart"
        }
      }
    },
    "Order" : {
      "type" : "object",
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The order id."
        }
      }
    },
    "PagedResponse" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The offset for this response, this is the number of elements skipped, not a page number."
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The actual number of results returned in results."
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of results matching the query."
        },
        "results" : {
          "type" : "array",
          "description" : "The results for this response.",
          "items" : {
            "type" : "object"
          }
        },
        "facets" : {
          "type" : "array",
          "description" : "The list of facets for this response.",
          "items" : {
            "$ref" : "#/definitions/Facet"
          }
        }
      }
    },
    "PagedResponseCategory" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The offset for this response, this is the number of elements skipped, not a page number."
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The actual number of results returned in results."
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of results matching the query."
        },
        "results" : {
          "type" : "array",
          "description" : "The results for this response.",
          "items" : {
            "$ref" : "#/definitions/Category"
          }
        },
        "facets" : {
          "type" : "array",
          "description" : "The list of facets for this response.",
          "items" : {
            "$ref" : "#/definitions/Facet"
          }
        }
      }
    },
    "PagedResponseInventoryItem" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The offset for this response, this is the number of elements skipped, not a page number."
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The actual number of results returned in results."
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of results matching the query."
        },
        "results" : {
          "type" : "array",
          "description" : "The results for this response.",
          "items" : {
            "$ref" : "#/definitions/InventoryItem"
          }
        },
        "facets" : {
          "type" : "array",
          "description" : "The list of facets for this response.",
          "items" : {
            "$ref" : "#/definitions/Facet"
          }
        }
      }
    },
    "PagedResponseProduct" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The offset for this response, this is the number of elements skipped, not a page number."
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The actual number of results returned in results."
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of results matching the query."
        },
        "results" : {
          "type" : "array",
          "description" : "The results for this response.",
          "items" : {
            "$ref" : "#/definitions/Product"
          }
        },
        "facets" : {
          "type" : "array",
          "description" : "The list of facets for this response.",
          "items" : {
            "$ref" : "#/definitions/Facet"
          }
        }
      }
    },
    "PagedResponseShoppingList" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The offset for this response, this is the number of elements skipped, not a page number."
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The actual number of results returned in results."
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of results matching the query."
        },
        "results" : {
          "type" : "array",
          "description" : "The results for this response.",
          "items" : {
            "$ref" : "#/definitions/ShoppingList"
          }
        },
        "facets" : {
          "type" : "array",
          "description" : "The list of facets for this response.",
          "items" : {
            "$ref" : "#/definitions/Facet"
          }
        }
      }
    },
    "PagedResponseShoppingListEntry" : {
      "type" : "object",
      "properties" : {
        "offset" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The offset for this response, this is the number of elements skipped, not a page number."
        },
        "count" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The actual number of results returned in results."
        },
        "total" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The total number of results matching the query."
        },
        "results" : {
          "type" : "array",
          "description" : "The results for this response.",
          "items" : {
            "$ref" : "#/definitions/ShoppingListEntry"
          }
        },
        "facets" : {
          "type" : "array",
          "description" : "The list of facets for this response.",
          "items" : {
            "$ref" : "#/definitions/Facet"
          }
        }
      }
    },
    "Payment" : {
      "type" : "object",
      "required" : [ "method" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the payment."
        },
        "customer" : {
          "description" : "The customer the payment belongs to. If this is not set the payment belongs to an anonymous customer.",
          "$ref" : "#/definitions/Customer"
        },
        "method" : {
          "type" : "string",
          "description" : "The method for this payment like Card or Cash."
        },
        "amount" : {
          "description" : "The amount of the payment.",
          "$ref" : "#/definitions/Price"
        },
        "token" : {
          "type" : "string",
          "description" : "The token used to communicate with the payment service provider."
        },
        "statusCode" : {
          "type" : "string",
          "description" : "The external status code for the payment."
        },
        "status" : {
          "type" : "string",
          "description" : "The external status message/text for the payment."
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this payment was created."
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this payment was last modified."
        }
      }
    },
    "PaymentWrapper" : {
      "type" : "object",
      "properties" : {
        "payment" : {
          "description" : "The payment object.",
          "$ref" : "#/definitions/Payment"
        }
      }
    },
    "Price" : {
      "type" : "object",
      "required" : [ "centAmount", "currency" ],
      "properties" : {
        "currency" : {
          "type" : "string",
          "description" : "The currency code for that price."
        },
        "centAmount" : {
          "type" : "number",
          "description" : "The amount in cents for that price."
        },
        "country" : {
          "type" : "string",
          "description" : "The country code for that price."
        }
      }
    },
    "Product" : {
      "type" : "object",
      "required" : [ "id", "masterVariantId", "variants" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The internal unique ID of the product in the commerce backend system."
        },
        "sku" : {
          "type" : "string",
          "description" : "The unique SKU of the product assigned by the vendor or manufacturer."
        },
        "name" : {
          "type" : "object",
          "description" : "The localized name of the product.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "object",
          "description" : "The localized description of the product.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "prices" : {
          "type" : "array",
          "description" : "The prices for this product.",
          "items" : {
            "$ref" : "#/definitions/Price"
          }
        },
        "categories" : {
          "type" : "array",
          "description" : "The categories for this product.",
          "items" : {
            "$ref" : "#/definitions/Category"
          }
        },
        "assets" : {
          "type" : "array",
          "description" : "The assets for this product.",
          "items" : {
            "$ref" : "#/definitions/Asset"
          }
        },
        "attributes" : {
          "type" : "array",
          "description" : "The attributes for this product.",
          "items" : {
            "$ref" : "#/definitions/Attribute"
          }
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this product was created."
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this product was last modified."
        },
        "masterVariantId" : {
          "type" : "string",
          "description" : "The id of the master variant"
        },
        "variants" : {
          "type" : "array",
          "description" : "The variants for this product.",
          "items" : {
            "$ref" : "#/definitions/ProductVariant"
          }
        }
      }
    },
    "ProductVariant" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The internal unique ID of the product in the commerce backend system."
        },
        "sku" : {
          "type" : "string",
          "description" : "The unique SKU of the product assigned by the vendor or manufacturer."
        },
        "name" : {
          "type" : "object",
          "description" : "The localized name of the product.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "object",
          "description" : "The localized description of the product.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "prices" : {
          "type" : "array",
          "description" : "The prices for this product.",
          "items" : {
            "$ref" : "#/definitions/Price"
          }
        },
        "categories" : {
          "type" : "array",
          "description" : "The categories for this product.",
          "items" : {
            "$ref" : "#/definitions/Category"
          }
        },
        "assets" : {
          "type" : "array",
          "description" : "The assets for this product.",
          "items" : {
            "$ref" : "#/definitions/Asset"
          }
        },
        "attributes" : {
          "type" : "array",
          "description" : "The attributes for this product.",
          "items" : {
            "$ref" : "#/definitions/Attribute"
          }
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this product was created."
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this product was last modified."
        },
        "available" : {
          "type" : "boolean",
          "description" : "Indicates if the product is available or not in the inventory."
        }
      }
    },
    "ShippingInfo" : {
      "type" : "object",
      "required" : [ "name", "price" ],
      "properties" : {
        "name" : {
          "type" : "string",
          "description" : "The shipping method name."
        },
        "price" : {
          "description" : "The shipping price.",
          "$ref" : "#/definitions/Price"
        },
        "discountedPrice" : {
          "description" : "The discounted shipping price.",
          "$ref" : "#/definitions/Price"
        },
        "shippingTaxInfo" : {
          "description" : "The tax for the shipping.",
          "$ref" : "#/definitions/TaxInfo"
        },
        "id" : {
          "type" : "string",
          "description" : "The shipping method id."
        }
      }
    },
    "ShippingMethod" : {
      "type" : "object",
      "required" : [ "id" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the shipping method."
        },
        "name" : {
          "type" : "string",
          "description" : "The name of the shipping method."
        },
        "description" : {
          "type" : "string",
          "description" : "The description of the shipping method."
        },
        "price" : {
          "description" : "The price of the shipping method aka shipping cost.",
          "$ref" : "#/definitions/Price"
        }
      }
    },
    "ShoppingList" : {
      "type" : "object",
      "required" : [ "entries", "id", "name" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the shopping list."
        },
        "name" : {
          "type" : "object",
          "description" : "The name of the shopping list. Localization is optional here, the default language is en.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "description" : {
          "type" : "object",
          "description" : "The description of the shopping list. Localization is optional here, the default language is en.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "entries" : {
          "type" : "array",
          "description" : "The entries of the shopping list.",
          "items" : {
            "$ref" : "#/definitions/ShoppingListEntry"
          }
        },
        "customerId" : {
          "type" : "string",
          "description" : "The customer id that owns this shopping list."
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this shopping list was created."
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this shopping list was last modified."
        }
      }
    },
    "ShoppingListEntry" : {
      "type" : "object",
      "required" : [ "id", "productVariant", "quantity" ],
      "properties" : {
        "id" : {
          "type" : "string",
          "description" : "The id of the entry."
        },
        "productVariant" : {
          "description" : "The product variant for the entry.",
          "$ref" : "#/definitions/ProductVariant"
        },
        "quantity" : {
          "type" : "integer",
          "format" : "int32",
          "description" : "The quantity for the entry."
        },
        "createdDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this entry was created."
        },
        "lastModifiedDate" : {
          "type" : "string",
          "format" : "date-time",
          "description" : "The date when this entry was last modified."
        }
      }
    },
    "TaxInfo" : {
      "type" : "object",
      "required" : [ "totalCentAmount" ],
      "properties" : {
        "totalCentAmount" : {
          "type" : "number",
          "description" : "The amount in cents for the tax info."
        },
        "taxPortions" : {
          "type" : "array",
          "description" : "The portions for this tax.",
          "items" : {
            "$ref" : "#/definitions/TaxPortion"
          }
        }
      }
    },
    "TaxPortion" : {
      "type" : "object",
      "properties" : {
        "name" : {
          "type" : "object",
          "description" : "The localized name for this tax portion.",
          "additionalProperties" : {
            "type" : "string"
          }
        },
        "centAmount" : {
          "type" : "number",
          "description" : "The amount in cents for the tax portion."
        }
      }
    }
  }
}